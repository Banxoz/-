#include <iostream>

using namespace std;

struct list
{
    int field; // поле данных
    struct list* next; // указатель на следующий элемент
    struct list* prev; // указатель на предыдущий элемент
};

// Функция для создания нового узла
struct list* createNode(int value) {
    struct list* newNode = new list;
    newNode->field = value;
    newNode->next = nullptr;
    newNode->prev = nullptr;
    return newNode;
}

// Функция для добавления узла в конец списка
void append(struct list** head, int value) {
    struct list* newNode = createNode(value);
    if (*head == nullptr) {
        *head = newNode;
        return;
    }
    struct list* last = *head;
    while (last->next != nullptr) {
        last = last->next;
    }
    last->next = newNode;
    newNode->prev = last;
}

// Функция для вывода списка
void printList(struct list* head) {
    struct list* current = head;
    while (current != nullptr) {
        cout << current->field << " ";
        current = current->next;
    }
    cout << endl;
}

// Функция для обмена двух узлов
struct list* swap(struct list* lst1, struct list* lst2, struct list* head) {
    if (lst1 == lst2) return head;

    struct list* prev1, * prev2, * next1, * next2;
    prev1 = lst1->prev; // узел предшествующий lst1
    prev2 = lst2->prev; // узел предшествующий lst2
    next1 = lst1->next; // узел следующий за lst1
    next2 = lst2->next; // узел следующий за lst2

    if (lst2 == next1) { // обмениваются соседние узлы
        lst2->next = lst1;
        lst2->prev = prev1;
        lst1->next = next2;
        lst1->prev = lst2;

        if (next2 != nullptr)
            next2->prev = lst1;
        if (prev1 != nullptr)
            prev1->next = lst2;
    }
    else if (lst1 == next2) { // обмениваются соседние узлы (обратный порядок)
        lst1->next = lst2;
        lst1->prev = prev2;
        lst2->next = next1;
        lst2->prev = lst1;

        if (next1 != nullptr)
            next1->prev = lst2;
        if (prev2 != nullptr)
            prev2->next = lst1;
    }
    else { // обмениваются несоседние узлы
        lst1->next = next2;
        if (next2 != nullptr)
            next2->prev = lst1;
        lst2->next = next1;
        if (next1 != nullptr)
            next1->prev = lst2;

        lst1->prev = prev2;
        if (prev2 != nullptr)
            prev2->next = lst1;
        lst2->prev = prev1;
        if (prev1 != nullptr)
            prev1->next = lst2;
    }

    // Возвращаем новый head, если один из узлов был head
    if (lst1 == head)
        return lst2;
    else if (lst2 == head)
        return lst1;
    else
        return head;
}

int main() {
    struct list* head = nullptr;

    // Создаем список с 5 элементами (1, 2, 3, 4, 5)
    for (int i = 1; i <= 5; i++) {
        append(&head, i);
    }

    cout << " Original list: ";
    printList(head);

    // Находим узлы для обмена (например, 2 и 4)
    struct list* node2 = head->next;
    struct list* node4 = head->next->next->next;

    cout << " Exchanging nodes " << node2->field << " and " << node4->field << endl;

    head = swap(node2, node4, head);

    cout << " The list after the exchange: ";
    printList(head);

    // Освобождаем память
    while (head != nullptr) {
        struct list* temp = head;
        head = head->next;
        delete temp;
    }

    return 0;
}
